# generated by fastapi-codegen:
#   filename:  FF_API.yaml
#   timestamp: 2024-11-22T13:36:24+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['Reservations'])


@router.get(
    '/v1/reservations',
    response_model=List[Reservation],
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Reservations'],
)
def get_v1_reservations(
    user_id: Optional[str] = Query(None, alias='userId'),
    trip_id: Optional[str] = Query(None, alias='tripId'),
    date: Optional[date] = None,
) -> Union[List[Reservation], Error]:
    """
    Get the list of reservations
    """
    pass


@router.post(
    '/v1/reservations',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '422': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Reservations'],
)
def post_v1_reservations(body: Reservation) -> Optional[Error]:
    """
    Create a new reservation
    """
    pass


@router.get(
    '/v1/reservations/{reservation_id}',
    response_model=Reservation,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Reservations'],
)
def get_v1_reservations_reservation_id(
    reservation_id: str = Path(..., alias='reservationId')
) -> Union[Reservation, Error]:
    """
    Get a reservation by ID
    """
    pass


@router.put(
    '/v1/reservations/{reservation_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Reservations'],
)
def put_v1_reservations_reservation_id(
    reservation_id: str = Path(..., alias='reservationId'), body: Reservation = ...
) -> Optional[Error]:
    """
    Edit a reservation
    """
    pass


@router.delete(
    '/v1/reservations/{reservation_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Reservations'],
)
def delete_v1_reservations_reservation_id(
    reservation_id: str = Path(..., alias='reservationId')
) -> Optional[Error]:
    """
    Delete a reservation
    """
    pass
