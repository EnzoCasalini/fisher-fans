# generated by fastapi-codegen:
#   filename:  FF_API.yaml
#   timestamp: 2024-11-22T13:36:24+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['Users'])


@router.get(
    '/v1/users',
    response_model=List[User],
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Users'],
)
def get_v1_users(
    last_name: Optional[str] = Query(None, alias='lastName'),
    first_name: Optional[str] = Query(None, alias='firstName'),
    email: Optional[str] = None,
    status: Optional[Status2] = None,
) -> Union[List[User], Error]:
    """
    Get the list of users
    """
    pass


@router.post(
    '/v1/users',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Users'],
)
def post_v1_users(body: User) -> Optional[Error]:
    """
    Create a new user
    """
    pass


@router.get(
    '/v1/users/{user_id}',
    response_model=User,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Users'],
)
def get_v1_users_user_id(
    user_id: str = Path(..., alias='userId')
) -> Union[User, Error]:
    """
    Get a user by ID
    """
    pass


@router.put(
    '/v1/users/{user_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Users'],
)
def put_v1_users_user_id(
    user_id: str = Path(..., alias='userId'), body: User = ...
) -> Optional[Error]:
    """
    Edit a user
    """
    pass


@router.delete(
    '/v1/users/{user_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Users'],
)
def delete_v1_users_user_id(
    user_id: str = Path(..., alias='userId')
) -> Optional[Error]:
    """
    Delete a user
    """
    pass
