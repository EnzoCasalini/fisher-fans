# generated by fastapi-codegen:
#   filename:  FF_API.yaml
#   timestamp: 2024-11-22T13:36:24+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['Boats'])


@router.get(
    '/v1/boats',
    response_model=List[Boat],
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Boats'],
)
def get_v1_boats(
    user_id: Optional[str] = Query(None, alias='userId'),
    y1: Optional[float] = None,
    y2: Optional[float] = None,
    x1: Optional[float] = None,
    x2: Optional[float] = None,
    name: Optional[str] = None,
    brand: Optional[str] = None,
    boat_type: Optional[str] = Query(None, alias='boatType'),
    home_port: Optional[str] = Query(None, alias='homePort'),
) -> Union[List[Boat], Error]:
    """
    Get the list of boats
    """
    pass


@router.post(
    '/v1/boats',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '422': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Boats'],
)
def post_v1_boats(body: Boat) -> Optional[Error]:
    """
    Create a new boat
    """
    pass


@router.get(
    '/v1/boats/{boat_id}',
    response_model=Boat,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Boats'],
)
def get_v1_boats_boat_id(
    boat_id: str = Path(..., alias='boatId')
) -> Union[Boat, Error]:
    """
    Get a boat by ID
    """
    pass


@router.put(
    '/v1/boats/{boat_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Boats'],
)
def put_v1_boats_boat_id(
    boat_id: str = Path(..., alias='boatId'), body: Boat = ...
) -> Optional[Error]:
    """
    Edit a boat
    """
    pass


@router.delete(
    '/v1/boats/{boat_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Boats'],
)
def delete_v1_boats_boat_id(
    boat_id: str = Path(..., alias='boatId')
) -> Optional[Error]:
    """
    Delete a boat
    """
    pass
