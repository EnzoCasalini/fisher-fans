# generated by fastapi-codegen:
#   filename:  FF_API.yaml
#   timestamp: 2024-11-22T13:36:24+00:00

from __future__ import annotations

from fastapi import APIRouter

from ..dependencies import *

router = APIRouter(tags=['Trips'])


@router.get(
    '/v1/trips',
    response_model=List[Trip],
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Trips'],
)
def get_v1_trips(
    user_id: Optional[str] = Query(None, alias='userId'),
    title: Optional[str] = None,
    trip_type: Optional[str] = Query(None, alias='tripType'),
    start_date: Optional[date] = Query(None, alias='startDate'),
    end_date: Optional[date] = Query(None, alias='endDate'),
) -> Union[List[Trip], Error]:
    """
    Get the list of trips
    """
    pass


@router.post(
    '/v1/trips',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '422': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Trips'],
)
def post_v1_trips(body: Trip) -> Optional[Error]:
    """
    Create a new trip
    """
    pass


@router.get(
    '/v1/trips/{trip_id}',
    response_model=Trip,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Trips'],
)
def get_v1_trips_trip_id(
    trip_id: str = Path(..., alias='tripId')
) -> Union[Trip, Error]:
    """
    Get a trip by ID
    """
    pass


@router.put(
    '/v1/trips/{trip_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Trips'],
)
def put_v1_trips_trip_id(
    trip_id: str = Path(..., alias='tripId'), body: Trip = ...
) -> Optional[Error]:
    """
    Edit a trip
    """
    pass


@router.delete(
    '/v1/trips/{trip_id}',
    response_model=None,
    responses={
        '400': {'model': Error},
        '401': {'model': Error},
        '403': {'model': Error},
        '404': {'model': Error},
        '500': {'model': Error},
    },
    tags=['Trips'],
)
def delete_v1_trips_trip_id(
    trip_id: str = Path(..., alias='tripId')
) -> Optional[Error]:
    """
    Delete a trip
    """
    pass
